// <auto-generated />
using System;
using EHRApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EHRApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240314001426_addActiveToPatientDemographic")]
    partial class addActiveToPatientDemographic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EHRApplication.Models.Alerts", b =>
                {
                    b.Property<int>("alertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("alertId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("activeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("alertName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("alertId");

                    b.HasIndex("MHN");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("EHRApplication.Models.Allergies", b =>
                {
                    b.Property<int>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("allergyId"));

                    b.Property<string>("allergyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("allergyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("allergyId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("EHRApplication.Models.CarePlan", b =>
                {
                    b.Property<int>("CPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CPId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("activeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPId");

                    b.HasIndex("MHN");

                    b.ToTable("CarePlan");
                });

            modelBuilder.Entity("EHRApplication.Models.LabOrders", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("completionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("orderDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("orderTime")
                        .HasColumnType("time");

                    b.Property<int>("orderedBy")
                        .HasColumnType("int");

                    b.Property<int>("testId")
                        .HasColumnType("int");

                    b.Property<int>("visitsId")
                        .HasColumnType("int");

                    b.HasKey("orderId");

                    b.HasIndex("MHN");

                    b.HasIndex("orderedBy");

                    b.HasIndex("testId");

                    b.HasIndex("visitsId");

                    b.ToTable("LabOrders");
                });

            modelBuilder.Entity("EHRApplication.Models.LabResults", b =>
                {
                    b.Property<int>("labId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("labId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("abnormalFlag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<int>("orderedBy")
                        .HasColumnType("int");

                    b.Property<string>("resultValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("testId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("time")
                        .HasColumnType("time");

                    b.Property<int>("visitId")
                        .HasColumnType("int");

                    b.Property<int>("visitsId")
                        .HasColumnType("int");

                    b.HasKey("labId");

                    b.HasIndex("MHN");

                    b.HasIndex("orderedBy");

                    b.HasIndex("testId");

                    b.HasIndex("visitId");

                    b.ToTable("LabResults");
                });

            modelBuilder.Entity("EHRApplication.Models.LabTestProfile", b =>
                {
                    b.Property<int>("testId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("testId"));

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("referenceRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("testName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("units")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("testId");

                    b.ToTable("LabTestProfile");
                });

            modelBuilder.Entity("EHRApplication.Models.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("EHRApplication.Models.MedAdministrationHistory", b =>
                {
                    b.Property<int>("administrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("administrationId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<int>("administeredBy")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("dateGiven")
                        .HasColumnType("date");

                    b.Property<string>("frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("medId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("timeGiven")
                        .HasColumnType("time");

                    b.HasKey("administrationId");

                    b.HasIndex("MHN");

                    b.HasIndex("administeredBy");

                    b.HasIndex("medId");

                    b.ToTable("MedAdministrationHistory");
                });

            modelBuilder.Entity("EHRApplication.Models.MedOrders", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fulfillmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("medId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("orderDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("orderTime")
                        .HasColumnType("time");

                    b.Property<int>("orderedBy")
                        .HasColumnType("int");

                    b.Property<int>("visitId")
                        .HasColumnType("int");

                    b.HasKey("orderId");

                    b.HasIndex("MHN");

                    b.HasIndex("medId");

                    b.HasIndex("orderedBy");

                    b.HasIndex("visitId");

                    b.ToTable("MedOrders");
                });

            modelBuilder.Entity("EHRApplication.Models.MedicationProfile", b =>
                {
                    b.Property<int>("medId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("medId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("medName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("medId");

                    b.ToTable("MedicationProfile");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientAllergies", b =>
                {
                    b.Property<int>("patientAllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientAllergyId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<int>("allergyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("onSetDate")
                        .HasColumnType("date");

                    b.HasKey("patientAllergyId");

                    b.HasIndex("MHN");

                    b.HasIndex("allergyId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientContact", b =>
                {
                    b.Property<int>("patientContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientContactId"));

                    b.Property<string>("ECFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ECLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ECPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ECRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("zipcode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("patientContactId");

                    b.HasIndex("MHN")
                        .IsUnique();

                    b.ToTable("PatientContact");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographic", b =>
                {
                    b.Property<int>("MHN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MHN"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("ethnicity")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("genderAssignedAtBirth")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("legalGuardian1")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("legalGuardian2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("middleName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("preferredLanguage")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("preferredPronouns")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("previousName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("primaryPhysician")
                        .HasColumnType("int");

                    b.Property<string>("race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("religion")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("suffix")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("MHN");

                    b.HasIndex("primaryPhysician");

                    b.ToTable("PatientDemographic");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.AbdomenCoccyxGenitalia", b =>
                {
                    b.Property<int>("ACGId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ACGId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("abdominalShapeAppearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bowelSounds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<string>("skinAppearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tendernessLumpDistention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tubeDrainCath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ACGId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("AbdomenCoccyxGenitalia");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Cardiothoracic", b =>
                {
                    b.Property<int>("cardioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cardioId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("drainLineSutureStaple")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<string>("heartRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heartRhythm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heartSounds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jugularVenousPulse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.HasKey("cardioId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("Cardiothoracic");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.ConsciousnessAndOrientation", b =>
                {
                    b.Property<int>("COId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("COId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<string>("person")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<string>("purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("COId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("ConsciousnessAndOrientation");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Extremities", b =>
                {
                    b.Property<int>("exId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("exId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("colorTempCapillaryRefill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<string>("pulseSensation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rangeOfMotion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tubeDrainSutureStapleCath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("exId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("Extremities");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.General", b =>
                {
                    b.Property<int>("genId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("genId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("appetite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("elimination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<string>("plainDiscomfort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.HasKey("genId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("General");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.HEENT_Neuro", b =>
                {
                    b.Property<int>("HNId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HNId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<string>("head")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hearing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<int>("providersId")
                        .HasColumnType("int");

                    b.Property<string>("throatMouth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HNId");

                    b.HasIndex("MHN");

                    b.HasIndex("providersId");

                    b.ToTable("HEENT_Neuros");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.PsychMentalHealth", b =>
                {
                    b.Property<int>("psychId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("psychId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("cognition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<string>("moodAffect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<int>("providersId")
                        .HasColumnType("int");

                    b.Property<string>("sleepPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thoughtPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("psychId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("PsychMentalHealth");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Respiratory", b =>
                {
                    b.Property<int>("respId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("respId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("chestShapeAppearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("drainLineSutureStaple")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<string>("lungSounds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<string>("respirationDepth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respirationRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("respId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("Respiratory");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Skin", b =>
                {
                    b.Property<int>("skinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("skinId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("colorTemp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("drynessIrritation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("evaluationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("evaluationTime")
                        .HasColumnType("time");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<int>("providersId")
                        .HasColumnType("int");

                    b.Property<string>("rednessIrritation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("signOfBreakdown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("woundsLessions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("skinId");

                    b.HasIndex("MHN");

                    b.HasIndex("providersId");

                    b.ToTable("Skin");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientInsurance", b =>
                {
                    b.Property<int>("patientInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientInsuranceId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("groupNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("memberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("policyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("primaryPhysician")
                        .HasColumnType("int");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("providerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("patientInsuranceId");

                    b.HasIndex("MHN");

                    b.HasIndex("primaryPhysician");

                    b.ToTable("PatientInsurance");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientMedications", b =>
                {
                    b.Property<int>("patientMedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientMedId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("activeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datePrescribed")
                        .HasColumnType("datetime2");

                    b.Property<string>("dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("medId")
                        .HasColumnType("int");

                    b.Property<int>("prescribedBy")
                        .HasColumnType("int");

                    b.Property<string>("prescriptionInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("patientMedId");

                    b.HasIndex("MHN");

                    b.HasIndex("medId");

                    b.HasIndex("prescribedBy");

                    b.ToTable("PatientMedications");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientNotes", b =>
                {
                    b.Property<int>("patientNotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientNotesId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("associatedProvider")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.Property<DateOnly>("occurredOn")
                        .HasColumnType("date");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("patientNotesId");

                    b.HasIndex("MHN");

                    b.HasIndex("createdBy");

                    b.ToTable("PatientNotes");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientProblems", b =>
                {
                    b.Property<int>("patientProblemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientProblemsId"));

                    b.Property<string>("ICD_10")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("immediacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("patientProblemsId");

                    b.HasIndex("MHN");

                    b.HasIndex("createdBy");

                    b.ToTable("PatientProblems");
                });

            modelBuilder.Entity("EHRApplication.Models.Providers", b =>
                {
                    b.Property<int>("providerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("providerId"));

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("providerId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("EHRApplication.Models.Visits", b =>
                {
                    b.Property<int>("visitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("visitsId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<bool>("admitted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("time")
                        .HasColumnType("time");

                    b.HasKey("visitsId");

                    b.HasIndex("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EHRApplication.Models.Vitals", b =>
                {
                    b.Property<int>("vitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vitalsId"));

                    b.Property<decimal>("BMI")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("bloodPressure")
                        .HasColumnType("int");

                    b.Property<decimal>("heightInches")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("intakeMilliLiters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("outputMilliLiters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("painLevel")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.Property<decimal>("pulseOximetry")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("respiratoryRate")
                        .HasColumnType("int");

                    b.Property<decimal>("temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("visitId")
                        .HasColumnType("int");

                    b.Property<decimal>("weightPounds")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("vitalsId");

                    b.HasIndex("patientId");

                    b.HasIndex("visitId");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EHRApplication.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("EHRApplication.Models.Alerts", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("EHRApplication.Models.CarePlan", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("EHRApplication.Models.LabOrders", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("orderedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.LabTestProfile", "labTests")
                        .WithMany()
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Visits", "visits")
                        .WithMany()
                        .HasForeignKey("visitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("labTests");

                    b.Navigation("patients");

                    b.Navigation("providers");

                    b.Navigation("visits");
                });

            modelBuilder.Entity("EHRApplication.Models.LabResults", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("orderedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.LabTestProfile", "labTests")
                        .WithMany()
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Visits", "visits")
                        .WithMany()
                        .HasForeignKey("visitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("labTests");

                    b.Navigation("patients");

                    b.Navigation("providers");

                    b.Navigation("visits");
                });

            modelBuilder.Entity("EHRApplication.Models.MedAdministrationHistory", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("administeredBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.MedicationProfile", "medProfile")
                        .WithMany()
                        .HasForeignKey("medId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medProfile");

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.MedOrders", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.MedicationProfile", "medProfile")
                        .WithMany()
                        .HasForeignKey("medId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("orderedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Visits", "visits")
                        .WithMany()
                        .HasForeignKey("visitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medProfile");

                    b.Navigation("patients");

                    b.Navigation("providers");

                    b.Navigation("visits");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientAllergies", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Allergies", "allergies")
                        .WithMany()
                        .HasForeignKey("allergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("allergies");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientContact", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithOne("ContactId")
                        .HasForeignKey("EHRApplication.Models.PatientContact", "MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographic", b =>
                {
                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("primaryPhysician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.AbdomenCoccyxGenitalia", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Cardiothoracic", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.ConsciousnessAndOrientation", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Extremities", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.General", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.HEENT_Neuro", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.PsychMentalHealth", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Respiratory", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographics.Skin", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientInsurance", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("primaryPhysician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientMedications", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.MedicationProfile", "medProfile")
                        .WithMany()
                        .HasForeignKey("medId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("prescribedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medProfile");

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientNotes", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientProblems", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.Visits", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.Vitals", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Visits", "visits")
                        .WithMany()
                        .HasForeignKey("visitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("visits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographic", b =>
                {
                    b.Navigation("ContactId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
