// <auto-generated />
using System;
using EHRApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EHRApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240202221644_AddDataToDatabase")]
    partial class AddDataToDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EHRApplication.Models.Alerts", b =>
                {
                    b.Property<int>("alertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("alertId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("alertName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("alertId");

                    b.HasIndex("MHN");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("EHRApplication.Models.Allergies", b =>
                {
                    b.Property<int>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("allergyId"));

                    b.Property<string>("allergyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("allergyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("allergyId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("EHRApplication.Models.Medications", b =>
                {
                    b.Property<int>("medId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("medId"));

                    b.Property<string>("alternateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("barcodeId")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contraindications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("endsOn")
                        .HasColumnType("date");

                    b.Property<string>("frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("homeMeds")
                        .HasColumnType("bit");

                    b.Property<int>("includeDEA_NPINumber")
                        .HasColumnType("int");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("medName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("startsOn")
                        .HasColumnType("date");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storageRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("medId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientAllergies", b =>
                {
                    b.Property<int>("patientAllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientAllergyId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<int>("allergyId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("onSetDate")
                        .HasColumnType("date");

                    b.HasKey("patientAllergyId");

                    b.HasIndex("MHN");

                    b.HasIndex("allergyId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientContact", b =>
                {
                    b.Property<int>("patientContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientContactId"));

                    b.Property<string>("ECFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ECLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ECPhone")
                        .HasColumnType("int");

                    b.Property<string>("ECRelationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zipcode")
                        .HasColumnType("int");

                    b.HasKey("patientContactId");

                    b.HasIndex("MHN");

                    b.ToTable("PatientContact");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographic", b =>
                {
                    b.Property<int>("MHN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MHN"));

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("ethnicity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("legalGuardian1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("legalGuardian2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("perferredLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<string>("religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MHN");

                    b.HasIndex("providerId");

                    b.ToTable("PatientDemographic");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDx", b =>
                {
                    b.Property<int>("patientDxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientDxId"));

                    b.Property<string>("Dx")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.HasKey("patientDxId");

                    b.HasIndex("MHN");

                    b.HasIndex("createdBy");

                    b.ToTable("PatientDx");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientInsurance", b =>
                {
                    b.Property<int>("patientInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientInsuranceId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("groupNumber")
                        .HasColumnType("int");

                    b.Property<int>("memberId")
                        .HasColumnType("int");

                    b.Property<int>("policyNumber")
                        .HasColumnType("int");

                    b.Property<int>("primaryPhysician")
                        .HasColumnType("int");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("providerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("patientInsuranceId");

                    b.HasIndex("MHN");

                    b.HasIndex("primaryPhysician");

                    b.ToTable("PatientInsurance");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientMedications", b =>
                {
                    b.Property<int>("patientMedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientMedId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<DateTime>("datePrescribed")
                        .HasColumnType("datetime2");

                    b.Property<string>("dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("medId")
                        .HasColumnType("int");

                    b.Property<string>("prescrptionInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providedBy")
                        .HasColumnType("int");

                    b.HasKey("patientMedId");

                    b.HasIndex("MHN");

                    b.HasIndex("medId");

                    b.HasIndex("providedBy");

                    b.ToTable("PatientMedications");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientNotes", b =>
                {
                    b.Property<int>("patientNotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientNotesId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("associatedProvider")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("createdBy")
                        .HasColumnType("int");

                    b.Property<DateOnly>("occurredOn")
                        .HasColumnType("date");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("patientNotesId");

                    b.HasIndex("MHN");

                    b.HasIndex("createdBy");

                    b.ToTable("PatientNotes");
                });

            modelBuilder.Entity("EHRApplication.Models.Providers", b =>
                {
                    b.Property<int>("providerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("providerId"));

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("providerId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("EHRApplication.Models.Visits", b =>
                {
                    b.Property<int>("visitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("visitsId"));

                    b.Property<int>("MHN")
                        .HasColumnType("int");

                    b.Property<bool>("admitted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("providerId")
                        .HasColumnType("int");

                    b.Property<int>("providersId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("time")
                        .HasColumnType("time");

                    b.HasKey("visitsId");

                    b.HasIndex("MHN");

                    b.HasIndex("providersId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EHRApplication.Models.Vitals", b =>
                {
                    b.Property<int>("vitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vitalsId"));

                    b.Property<int>("diastolicPressure")
                        .HasColumnType("int");

                    b.Property<int>("heartRate")
                        .HasColumnType("int");

                    b.Property<decimal>("heightInches")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("intakeMilliLiters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("outputMilliLiters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.Property<decimal>("pulseOximetry")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("respiratoryRate")
                        .HasColumnType("int");

                    b.Property<int>("systolicPressure")
                        .HasColumnType("int");

                    b.Property<decimal>("temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("visitId")
                        .HasColumnType("int");

                    b.Property<decimal>("weightPounds")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("vitalsId");

                    b.HasIndex("patientId");

                    b.HasIndex("visitId");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EHRApplication.Models.Alerts", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientAllergies", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Allergies", "allergies")
                        .WithMany()
                        .HasForeignKey("allergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("allergies");

                    b.Navigation("patients");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientContact", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDemographic", b =>
                {
                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientDx", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientInsurance", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("primaryPhysician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientMedications", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Medications", "medications")
                        .WithMany()
                        .HasForeignKey("medId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medications");

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.PatientNotes", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("createdBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.Visits", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("MHN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Providers", "providers")
                        .WithMany()
                        .HasForeignKey("providersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("providers");
                });

            modelBuilder.Entity("EHRApplication.Models.Vitals", b =>
                {
                    b.HasOne("EHRApplication.Models.PatientDemographic", "patients")
                        .WithMany()
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHRApplication.Models.Visits", "visits")
                        .WithMany()
                        .HasForeignKey("visitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patients");

                    b.Navigation("visits");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
